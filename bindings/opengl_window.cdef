
# Limbus - A cross-platform multimedia library.
# Written in 2014 by Jesper Oskarsson jesosk@gmail.com
#
# To the extent possible under law, the author(s) have dedicated all copyright
# and related and neighboring rights to this software to the public domain worldwide.
# This software is distributed without any warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication along with this software.
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

class Limbus::OpenglWindow : Limbus::InputDispatcher
	var created : bool,
	      window : ptr,
	      impl_screen : Limbus::Screen,
	      initial_screen : Limbus::Screen,
	      context : ptr

	signal on_close()
	signal on_file_drop( filepath : string, x : int, y : int )
	signal on_resize()

	property screen : Limbus::Screen
	get
		return this.impl_screen
	set
		this.impl_screen = value
		limbus::lb_window_set_screen( this.window, value.get_impl() )
	end
	
	property styled : bool
	get
		var value : int
		value = limbus::lb_window_get_styled( this.window )
		if value == 1 then return true end
		return false
	set
		if value == true then
			limbus::lb_window_set_styled( this.window, 1 )
		end
		if value == false then
			limbus::lb_window_set_styled( this.window, 0 )
		end
	end
	
	property resizable : bool
	get
		var value : int
		value = limbus::lb_window_get_resizable( this.window )
		if value == 1 then return true end
		return false
	set
		if value == true then
			limbus::lb_window_set_resizable( this.window, 1 )
		end
		if value == false then
			limbus::lb_window_set_resizable( this.window, 0 )
		end
	end

	property caption : string
	get
		return limbus::lb_window_get_caption( this.window )
	set
		limbus::lb_window_set_caption( this.window, value )
	end

	property width : int
	get
		return limbus::lb_window_get_width( this.window )
	set
		limbus::lb_window_set_width( this.window, value )
	end

	property height : int
	get
		return limbus::lb_window_get_height( this.window )
	set
		limbus::lb_window_set_height( this.window, value )
	end

	property x : int
	get
		return limbus::lb_window_get_x( this.window )
	set
		limbus::lb_window_set_x( this.window, value )
	end

	property y : int
	get
		return limbus::lb_window_get_y( this.window )
	set
		limbus::lb_window_set_y( this.window, value )
	end


	def construct() : void
		this.created = false

		this.window = limbus::lb_window_construct()
		assert( limbus::lb_window_constructed( this.window ) == 1 )
		
		var new_screen : Limbus::Screen
		new_screen = new Limbus::Screen()
		this.impl_screen = new_screen
		this.initial_screen = new_screen
		limbus::lb_window_set_screen( this.window, new_screen.get_impl() )
	end

	def destroy!() : void
		limbus::lb_opengl_context_release_current( this.context )
		limbus::lb_opengl_context_destruct( this.context )
		this.created = false
	end
	
	def destruct() : void
		if this.created == true then
			this.destroy!()
		end

		delete this.initial_screen
		limbus::lb_window_destruct( this.window )
	end

	def release_context!() : void
		limbus::lb_opengl_context_release_ownership( this.context )
	end

	def swap_buffers() : void
		limbus::lb_opengl_context_swap_buffers( this.context )
	end

	def create() : void
		this.context = limbus::lb_opengl_context_construct( this.window, limbus::LBOpenglContextCreateNew )
		assert( limbus::lb_opengl_context_constructed( this.context ) == 1 )

		limbus::lb_opengl_context_bind( this.context, limbus::LBOpenglContextDefaultPixelformat )
		limbus::lb_opengl_context_make_current( this.context )

		this.created = true
	end

	def set_swap_interval!( interval : int ) : bool
		if limbus::lb_opengl_context_set_swap_interval( this.context, interval ) == 1 then
			return true
		end
		
		return false
	end
	
	def add_input_device( device : Limbus::InputDevice ) : void
		limbus::lb_window_add_input_device( this.window, device.get_impl() )
	end

	def get_context_impl() : ptr
		return this.context
	end

	def get_window_impl() : ptr
		return this.window
	end

	def poll_events() : bool
	    var found_event : bool
	    found_event = false

		while limbus::lb_window_next_event( this.window ) == 1 do
			var e : int
			e = limbus::lb_window_get_event_type( this.window )

			if e == limbus::LBWindowEvent::LBWindowEventClose then
				on_close()
			end

			if e == limbus::LBWindowEvent::LBWindowEventFileDrop then
				var files : int
				files = limbus::lb_window_get_event_files( this.window )

				var i : int
				i = 0
				while i < files do
					on_file_drop( limbus::lb_window_get_event_file( this.window, i ),
								  limbus::lb_window_get_event_x( this.window ),
								  limbus::lb_window_get_event_y( this.window ) )
					i = i + 1
				end
			end

			if e == limbus::LBWindowEvent::LBWindowEventResize then
				on_resize()
			end

			found_event = true
		end

		return found_event
	end
end

